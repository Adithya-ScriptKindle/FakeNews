# -*- coding: utf-8 -*-
"""Fake News Predication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u0i4Z3B_09KECPoy17BgyraFat42CEl6
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
wordnet_lemmatizer = WordNetLemmatizer()
nltk.download("stopwords")
nltk.download("wordnet")
data=pd.read_csv('/content/drive/My Drive/news.csv', low_memory=False)
data.head(5)

data['label'] = np.where(data['label']=='REAL',1,0)

labels=data.label
labels.head()

# Lemmatizing
def Lemmatizing(data):
    removed_other_characters = re.sub('[^a-zA-Z]', ' ', data)
    data_lower = removed_other_characters.lower()
    data_split = data_lower.split()
    data_lemmatized = [wordnet_lemmatizer.lemmatize(word) for word in data_split if word not in stopwords.words('english')]
    data = ' '.join(data_lemmatized)
    return data

data['title'] = data['title'].apply(Lemmatizing)
data['text'] = data['text'].apply(Lemmatizing)

#Split the dataset
x_train,x_test,y_train,y_test=train_test_split(data['text'], labels, test_size=0.2, random_state=7)

# Initialize a TfidfVectorizer
data_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.5)
# Fit and transform train set, transform test set
train=data_vectorizer.fit_transform(x_train) 
test=data_vectorizer.transform(x_test)

# Initialize a PassiveAggressiveClassifier
pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(train,y_train)
# Predict on the test set and calculate accuracy
y_pred=pac.predict(test)
score=accuracy_score(y_test,y_pred)
print(f'Accuracy: {round(score*100,2)}%')

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(train, y_train)
test_prediction = model.predict(test)
test_data_accuracy = accuracy_score(test_prediction, y_test)
print(f'Accuracy: {round(test_data_accuracy*100,2)}%')

# Build confusion matrix
confusion_matrix(y_test,y_pred)

# making a predictive system:Logistic Regression
x_new = test[50]

prediction = model.predict(x_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

# making a predictive system:PassiveAggressiveClassifier
x_new = test[50]

prediction = pac.predict(x_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')